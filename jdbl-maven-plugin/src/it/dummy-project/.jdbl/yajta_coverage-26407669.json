{
"bag.BagClass": ["BagClass()V","main()V"],
"org.apache.commons.collections4.bag.HashBag": ["HashBag()V"],
"org.apache.commons.collections4.bag.AbstractMapBag": ["AbstractMapBag(Ljava/util/Map;)V","add(Ljava/lang/Object;I)Z","add(Ljava/lang/Object;)Z","uniqueSet()Ljava/util/Set;"],
"org.apache.commons.collections4.bag.AbstractMapBag$MutableInteger": ["AbstractMapBag$MutableInteger(I)V"],
"org.apache.commons.collections4.set.UnmodifiableSet": ["unmodifiableSet(Ljava/util/Set;)Ljava/util/Set;","UnmodifiableSet(Ljava/util/Set;)V"],
"org.apache.commons.collections4.set.AbstractSerializableSetDecorator": ["AbstractSerializableSetDecorator(Ljava/util/Set;)V"],
"org.apache.commons.collections4.set.AbstractSetDecorator": ["AbstractSetDecorator(Ljava/util/Set;)V","decorated()Ljava/util/Collection;","decorated()Ljava/util/Set;"],
"org.apache.commons.collections4.collection.AbstractCollectionDecorator": ["AbstractCollectionDecorator(Ljava/util/Collection;)V","toString()Ljava/lang/String;","decorated()Ljava/util/Collection;"],
"common.Order$Market": ["<clinit>()V","Order$Market(Ljava/lang/String;I)V"],
"common.Order$Type": ["<clinit>()V","Order$Type(Ljava/lang/String;I)V"],
"common.Order": ["Order(Lcommon/Order$Market;Lcommon/Order$Type;Ljava/math/BigDecimal;Ljava/math/BigDecimal;Ljava/math/BigDecimal;)V","getPrice()Ljava/math/BigDecimal;","getFee()Ljava/math/BigDecimal;","provideAuditDetails()Ljava/lang/String;","getType()Lcommon/Order$Type;"],
"lambda.OrderBookAnalyser": ["getNumberOfMatchedOrders(Ljava/util/List;Llambda/OrderMatcher;)I","getNumberOfMatchedOrders(Ljava/util/List;Llambda/OrderMatcherWithFees;)I","getAuditDetailsForMatchingOrders(Ljava/util/List;Ljava/util/function/Predicate;Ljava/util/function/Function;)Ljava/util/List;","getNumberOfMatchedOrdersUsingJdkPredicateFunctionalInterface(Ljava/util/List;Ljava/util/function/Predicate;)I","getAuditDetailsForMatchingOrdersUsingGenericArgs(Ljava/lang/Iterable;Ljava/util/function/Predicate;Ljava/util/function/Function;)Ljava/util/List;"],
"annotations.Person": ["Person(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V","initNames()V"],
"annotations.ObjectToJsonConverter": ["ObjectToJsonConverter()V","convertToJson(Ljava/lang/Object;)Ljava/lang/String;","checkIfSerializable(Ljava/lang/Object;)V","initializeObject(Ljava/lang/Object;)V","getJsonString(Ljava/lang/Object;)Ljava/lang/String;","getKey(Ljava/lang/reflect/Field;)Ljava/lang/String;","lambda$getJsonString$0(Ljava/util/Map$Entry;)Ljava/lang/String;"],
"annotations.JsonSerializationException": ["JsonSerializationException(Ljava/lang/String;)V"],
"calc.Calculator": ["Calculator(II)V","sum()I","other()I"],
"calc.CalculatorB": ["CalculatorB()V"],
"calc.other.CalculatorNew": ["CalculatorNew(II)V","sum()I"],
"interfaces.Car": ["Car(Ljava/lang/String;)V","speedUp()Ljava/lang/String;","getBrand()Ljava/lang/String;","slowDown()Ljava/lang/String;"],
"interfaces.Motorbike": ["Motorbike(Ljava/lang/String;)V","slowDown()Ljava/lang/String;","getBrand()Ljava/lang/String;","speedUp()Ljava/lang/String;"],
"interfaces.Vehicle": ["turnAlarmOff()Ljava/lang/String;","turnAlarmOn()Ljava/lang/String;","getHorsePower(II)I"],
"defaultmethods.MyTradingApi": ["MyTradingApi()V","getOpenOrders(I)Ljava/util/List;"],
"defaultmethods.TradingApi": ["getImplName()Ljava/lang/String;","getCurrentExchangeTime()Ljava/util/Date;"],
"enums.CropState": ["<clinit>()V","CropState(Ljava/lang/String;II)V","values()[Lenums/CropState;","getData()B","getByData(B)Lenums/CropState;"]
}